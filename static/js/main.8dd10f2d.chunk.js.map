{"version":3,"sources":["components/AudioPlayer.jsx","App.js","serviceWorker.js","index.js"],"names":["AudioPlayer","props","playersContext","useContext","PlayersContext","useState","file","setFile","fileName","setFileName","player","useRef","fileInput","play","setPlay","useEffect","current","pause","playerId","Segment","clearing","src","ref","onEnded","type","accept","hidden","onChange","e","target","files","name","URL","createObjectURL","Button","icon","onClick","click","Icon","disabled","color","currentTime","playersDispatch","id","style","padding","floated","React","createContext","h1","marginTop","initialState","reducer","state","action","newState","indexOfPlayerToMove","length","filter","el","findIndex","playerToMove","App","useReducer","players","dispatch","Provider","value","playersState","Header","as","content","textAlign","Container","Group","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8dd10f2d.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect, useContext } from 'react'\r\nimport { Button, Icon, Segment } from 'semantic-ui-react';\r\nimport { PlayersContext } from '../App';\r\n\r\nfunction AudioPlayer(props) {\r\n  const playersContext = useContext(PlayersContext);\r\n\r\n  const [file, setFile] = useState(null);\r\n  const [fileName, setFileName] = useState(null);\r\n\r\n  const player = useRef();\r\n  const fileInput = useRef();\r\n\r\n  const [play, setPlay] = useState(false);\r\n  useEffect(() => {\r\n    if (play) {\r\n      player.current.play();\r\n    }\r\n\r\n    if (!play) {\r\n      player.current.pause();\r\n    }\r\n    \r\n  }, [play])\r\n\r\n  const handleStopClick = () => {\r\n    setPlay(false);\r\n    player.current.currentTime = 0;\r\n  }\r\n\r\n  const handleFileChange = (e) => {\r\n    setPlay(false);\r\n    setFileName(e.target.files[0].name);\r\n    setFile(URL.createObjectURL(e.target.files[0]));\r\n  }\r\n\r\n  const { playerId } = props;\r\n\r\n  return (\r\n    <Segment clearing>\r\n      <audio src={file} ref={player} onEnded={() => setPlay(false)}/>\r\n      <input type=\"file\" ref={fileInput} accept=\"audio/*\" hidden onChange={handleFileChange} />\r\n      <Button icon onClick={() => fileInput.current.click()}>\r\n        <Icon name=\"folder\" />\r\n      </Button>\r\n      <Button disabled={!file} icon onClick={() => setPlay(!play)}>\r\n        <Icon name={play ? 'pause' : 'play'} color={play ? 'blue' : 'green'}/>\r\n      </Button>\r\n      <Button disabled={!file} icon onClick={handleStopClick}>\r\n        <Icon name=\"stop\" color=\"red\" />\r\n      </Button>\r\n      <Button icon onClick={() => playersContext.playersDispatch({ type: 'delete', id: playerId })}>\r\n        <Icon name=\"delete\" />\r\n      </Button>\r\n      <span style={{ padding: 'inherit' }}>{fileName || 'No file selected'}</span>\r\n      <Button icon onClick={() => playersContext.playersDispatch({ type: 'moveup', id: playerId })} floated='right'>\r\n        <Icon name=\"arrow up\" />\r\n      </Button>\r\n      <Button icon onClick={() => playersContext.playersDispatch({ type: 'movedown', id: playerId })} floated='right'>\r\n        <Icon name=\"arrow down\" />\r\n      </Button>\r\n    </Segment>\r\n  )\r\n}\r\n\r\nexport default AudioPlayer\r\n","import React, { useReducer } from 'react';\r\nimport { Container, Segment, Header, Button, Icon } from 'semantic-ui-react';\r\nimport AudioPlayer from './components/AudioPlayer';\r\n\r\nexport const PlayersContext = React.createContext();\r\n\r\nconst style = {\r\n  h1 : {\r\n    marginTop: '3em',\r\n  },\r\n}\r\n\r\nconst initialState = [{ id: 1 }];\r\n\r\nconst reducer = (state, action) => {\r\n  let newState, indexOfPlayerToMove;\r\n\r\n  switch (action.type) {\r\n    case 'add':\r\n      return [\r\n        ...state,\r\n        {\r\n          id: state.length ? state[state.length - 1].id + 1 : 1\r\n        }\r\n      ];\r\n    case 'delete':\r\n      newState = state.filter(el => el.id !== action.id);\r\n\r\n      return [\r\n        ...newState\r\n      ];\r\n    case 'moveup':\r\n      indexOfPlayerToMove = state.findIndex(player => player.id === action.id);\r\n      newState = state;\r\n\r\n      if (indexOfPlayerToMove !== 0) {\r\n        const playerToMove = state[indexOfPlayerToMove];\r\n\r\n        newState[indexOfPlayerToMove] = newState[indexOfPlayerToMove - 1];\r\n        newState[indexOfPlayerToMove - 1] = playerToMove;\r\n      }\r\n      \r\n      return [\r\n        ...newState\r\n      ];\r\n    case 'movedown':\r\n      indexOfPlayerToMove = state.findIndex(player => player.id === action.id);\r\n      newState = state;\r\n\r\n      if (indexOfPlayerToMove !== newState.length - 1) {\r\n        const playerToMove = state[indexOfPlayerToMove];\r\n\r\n        newState[indexOfPlayerToMove] = newState[indexOfPlayerToMove + 1];\r\n        newState[indexOfPlayerToMove + 1] = playerToMove;\r\n      }\r\n      \r\n      return [\r\n        ...newState\r\n      ];\r\n    default:\r\n      return initialState;\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  const [players, dispatch] = useReducer(reducer, initialState);\r\n\r\n  return (\r\n    <PlayersContext.Provider value={{ playersState: players, playersDispatch: dispatch }}>\r\n      <div>\r\n        <Header as='h1' content='Cue Queue' style={style.h1} textAlign='center' />\r\n        <Container>\r\n          <Segment.Group>\r\n            {players.map(player => <AudioPlayer key={player.id} playerId={player.id} />)}\r\n          </Segment.Group>\r\n          <Button icon onClick={() => dispatch({ type: 'add' })}>\r\n            <Icon name=\"plus\" />\r\n          </Button>\r\n        </Container>\r\n      </div>\r\n    </PlayersContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}